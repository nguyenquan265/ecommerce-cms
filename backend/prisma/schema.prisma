// npx prisma db push => to apply the changes to the database
// npx prisma generate => to generate the prisma client
// npx prisma studio => to open the prisma studio
// npx prisma migrate reset => to reset the migrations

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id         String      @id @default(cuid())
  name       String
  userId     String
  billboards Billboard[]
  categories Category[]
  sizes      Size[]
  colors     Color[]
  products   Product[]
  orders     Order[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(cuid())
  storeId    String
  store      Store      @relation(fields: [storeId], references: [id])
  categories Category[]
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId], name: "storeIdForBillboard")
}

model Category {
  id          String    @id @default(cuid())
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[]
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId], name: "storeIdForCategory")
  @@index([billboardId], name: "billboardIdForCategory")
}

model Size {
  id        String    @id @default(cuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId], name: "storeIdForSize")
}

model Color {
  id        String    @id @default(cuid())
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id])
  products  Product[]
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId], name: "storeIdForColor")
}

model Product {
  id         String      @id @default(cuid())
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[]
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId], name: "storeIdForProduct")
  @@index([categoryId], name: "categoryIdForProduct")
  @@index([sizeId], name: "sizeIdForProduct")
  @@index([colorId], name: "colorIdForProduct")
}

model Image {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId], name: "productIdForImage")
}

model Order {
  id         String      @id @default(cuid())
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId], name: "storeIdForOrder")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  Order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId], name: "orderIdForOrderItem")
  @@index([productId], name: "productIdForOrderItem")
}
